name: code-npm-release

on:
  push:
    paths:
      - 'combined/2/code/**'
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  code-npm-verify:
    uses: ./.github/workflows/code-npm-verify.yml
    with:
      code-path: 'combined/2/code'

  generate-version:
    name: Generate next release version
    needs: code-npm-verify
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '20.x'
    outputs:
      next-release-version: ${{ steps.generate-version.outputs.next-release-version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Generate version
        id: generate-version      
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}          
        run: |
            npm install -g semantic-release@24.2.0 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/exec@6.0.3
            npx semantic-release --no-ci --dry-run
      
      - name: Echo next release version
        run: "echo Next release version: ${{ steps.generate-version.outputs.next-release-version }}"
                  
  build-and-push:
    if: ${{ needs.generate-version.outputs.next-release-version !='' }}
    needs: generate-version
    name: Build and push image to ECR
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.get-image-name.outputs.result }}
      app-name: ${{ steps.get-app-name.outputs.result }}
    env:
      CODE_PATH: 'combined/2/code'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ vars.GH_AWS_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ vars.AWS_REGION }}
    
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get app name
        id: get-app-name
        working-directory: ${{ env.CODE_PATH }}
        run: |
          APP_NAME=$(npm pkg get name | tr -d '"')
          echo "result=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Get image name
        id: get-image-name
        run: |
          echo "result=${{ steps.get-app-name.outputs.result }}:${{ needs.generate-version.outputs.next-release-version }}" >> $GITHUB_OUTPUT

      - name: Build image and push to ECR
        id: build-image-push
        working-directory: ${{ env.CODE_PATH }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: ${{ steps.get-image-name.outputs.result }}
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME .
          docker push $ECR_REGISTRY/$IMAGE_NAME
      
      - name: Update version in package.json
        id: update-version
        working-directory: ${{ env.CODE_PATH }}
        run: |
          npm version ${{ needs.generate-version.outputs.next-release-version }} --no-git-tag-version
          
      - name: Commit changes
        id: commit-changes
        working-directory: ${{ env.CODE_PATH }}
        run: |
          git status
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull
          git add package.json
          git commit -m "Update package.json version to ${{ needs.generate-version.outputs.next-release-version }}"
          git push
  
  semantic-release:
    if: ${{ needs.generate-version.outputs.next-release-version !='' }}
    needs: [generate-version, build-and-push]
    name: Semantic Release 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'	

      - name: Run semantic versioning
        id: semantic-release       
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}              
        run: |
          git pull
          npm install -g semantic-release@24.2.0 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/exec@6.0.3
          npx semantic-release
          
  deploy-to-dev:
    if: ${{ needs.generate-version.outputs.next-release-version !='' }}
    needs: [build-and-push, generate-version, build-and-push]
    uses: ./.github/workflows/deploy.yml
    with:
      env: 'dev'
      app-name: ${{ needs.build-and-push.outputs.app-name }}
      image-name: ${{ needs.build-and-push.outputs.image-name }}
  
  notify:
    if: ${{ ! cancelled() }}
    needs: [generate-version, semantic-release, build-and-push, deploy-to-dev]
    name: Notify
    runs-on: ubuntu-latest
    steps:
      - name: Determine Failed Jobs
        id: failed-jobs
        uses: actions/github-script@v7
        with: 
          script: |
            console.log('Payload:', github.context.payload.workflow_run);
            const jobs = JSON.stringify(github.context.payload.workflow_run.jobs);
            console.log('Jobs:', jobs);
            const failedJobs = needs.filter(job => job.conclusion === 'failure');
            console.log('Failed jobs:', failedJobs);
            core.setOutput('result', failedJobs.map(job => job.name).join(', '));

      - uses: actions/checkout@v4
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ steps.failed-jobs.outputs.result == '' && 'good' || 'danger' }}
          SLACK_TITLE: "Code Release - ${{ needs.generate-version.outputs.next-release-version }}"