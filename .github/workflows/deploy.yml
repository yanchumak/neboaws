name: code-deploy

on:
  workflow_dispatch:
    inputs:
      app-name:
        description: 'Name of the app to deploy'
        required: true
      env:
        type: choice
        required: true
        description: 'Environment to deploy'
        options:
        - dev
        - pro
      image-name:
        description: 'Name of the image to deploy'
        required: true
  workflow_call:
    inputs:
      app-name:
        type: string
        required: true
      env:
        type: string
        required: true
      image-name:
        type: string
        required: true

permissions:
  id-token: write
  contents: read

jobs: 
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.env }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ vars.GH_AWS_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ inputs.app-name }}-task-def-${{ inputs.env }} --query taskDefinition > task-definition.json
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.6.0
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.app-name }}-container-${{ inputs.env }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.image-name }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2.1.2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.app-name }}-service-${{ inputs.env }}
          cluster: ${{ inputs.app-name }}-cluster-${{ inputs.env }}
          wait-for-service-stability: false
