name: release-preview

on:
  pull_request:
    types: [labeled, unlabeled, synchronize, opened, edited, reopened, ready_for_review]
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  preview-changelog:
    name: Generate Version Preview and Changelog
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '20.x'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for Release Label
        id: check-label
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(label => label.name);
            core.setOutput('has-release-preview-label', labels.includes('release-preview'));

      - name: Skip if No Release Label
        if: ${{ steps.check-label.outputs.has-release-preview-label != 'true' }}
        run: echo "No release label found. Skipping workflow."

      - name: Check semantic versioning
        if: ${{ steps.check-label.outputs.has-release-preview-label == 'true' }}
        id: semantic-release       
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}              
        run: |
            GITHUB_REF=${{ github.head_ref }}
            npm install -g semantic-release@24.2.0 @semantic-release/changelog@6.0.3 @semantic-release/git@10.0.1 @semantic-release/exec@6.0.3
            npx semantic-release --no-ci --dry-run --branches ${{ github.head_ref }} > semantic-output.txt || true
            cat semantic-output.txt

      - name: Test
        run: "echo version: ${{ jobs.semantic-release.outputs.next-release-version }}"
          
      - name: Post Changelog to PR
        if: ${{ steps.check-label.outputs.has-release-preview-label == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const semanticReleaseOutput = fs.readFileSync('./semantic-output.txt', 'utf-8');
            const semanticReleaseLogMatch = /^[[0-9:\sAMPM]+\]\s\[semantic-release\].*$/;
            const lines = semanticReleaseOutput.split('\n');
            const lastSemanticReleaseLogIndex = [...lines]
                .reverse()
                .findIndex((line) => line.match(semanticReleaseLogMatch));

            const releaseNoteIndex = lines.length - lastSemanticReleaseLogIndex;
            const releaseNote = lines.slice(releaseNoteIndex);

            let res = releaseNote.join('\n');
            if (!releaseNote.length || !res) {
                res = '### No release note would be generated.';
            }

            const SEMANTIC_RELEASE_BODY_HEADER = '## Semantic Release Report';
            const body = [SEMANTIC_RELEASE_BODY_HEADER, res].join('\n');

            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body,
            });